agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)),
time = log.txt)
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = list(auc$classif.auc),
time = log.txt)
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(as.list(auc$classif.auc)),
time = log.txt)
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = as.list(auc$classif.auc),
time = log.txt)
d <- data.frame(id = 1:2,
name = c("Jon", "Mark"),
children = I(list(c("Mary", "James"),
c("Greta", "Sally")))
)
View(d)
as.list(auc$classif.auc)
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)),
time = log.txt)
model_details <- data.frame(
auc = I(list(auc$classif.auc))
)
View(model_details)
print(model_details)
print(model_details$auc)
View(model_details)
auc.mean
model_details <- data.frame(
auc_mean = auc.mean,
auc = I(list(auc$classif.auc))
)
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc))
)
View(model_details)
log.txt
tic.clearlog()
toc(log = TRUE, quiet = TRUE)
log.txt <- unlist(tic.log(format = T))
log.txt
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)),
time = log.txt)
tic.clearlog()
toc(log = TRUE, quiet = TRUE)
log.txt <- unlist(tic.log(format = T))
log.txt
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)),
time = log.txt)
log.txt
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc))
)
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
time = log.txt,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)))
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
time = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)))
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)),
time = log.txt)
#     p[,1] #get the prob for 1st class
#   } else {
#     model$predict_newdata(...)$data$response
#   }
# }
#
# #Make prediction
# pred <- terra::predict(covariates, tuned.model, fun = pfmlr, na.rm = TRUE)
# pred <- round(pred, 5)
# writeRaster(pred, str_c(results.path,model.name, "_predrisk",".tif"),overwrite=T)
tic()
toc(log = TRUE, quiet = TRUE)
log.txt <- unlist(tic.log(format = T))
log.txt
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc = I(list(auc$classif.auc)),
time = log.txt)
View(model_details)
model_details <- data.frame(
roi = "a",
samples =1,
totalloss_pixels = 1,
cv = 1,
mods = 1,
rep = 1,
agent = 1,
auc_mean = auc.mean,
auc_dist = I(list(auc$classif.auc)),
time = log.txt)
setwd("E:/01_NSW phase 2/statelevelanalysis")
setwd("E:/01_NSW phase 2/statelevelanalysis")
##July 2022 using mlr3 modelling approach##
#Remove all data from the environment
rm(list = ls(all.names = TRUE))
#Project defaults: Albers Equal Projection
project.crs <- 'EPSG:3577'
project.res <- 100
#Load required libraries
required.packages <- c("sf","terra","data.table","tidyverse",
"mlr3","mlr3learners","mlr3spatiotempcv",
"mlr3viz","mlr3tuning","iml","future","furrr",
"purrr","xgboost","lattice","tictoc","scico","ggtext")
purrr::walk(required.packages,library, character.only = T)
#####User modified parameters
region <- c("state","Central West","Tablelands","Coastal","Western")
agent <- c("agri","fores","infra","combined")
######### Modelling parameters #################
#nsamples <- 100 #Samples # all samples are selected in the code below use this later if there is a need
nfolds <- 5 #CV folds
nreps <- 2 #Number of times to repeat CV
nmod <- 2 #Hyper parameter search limit
##################################3 DON"T MODIFY ANYTHING BELOW THIS CODE ##########################
#Create a list of study area and bind them for loop
#Specify the data path based on the system
data.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ "./data/",
#Sys.info()["sysname"] == "Darwin" ~ "mac",
Sys.info()["sysname"] == "Linux" ~ "/home/ubuntu/data/"
)
#Warning message if it can't find the directory
if (dir.exists(data.path)){
print("Directory exists - process will run")
} else {
string.to.print <- paste("ERROR: can't find the directory: check data path", data.path)
stop(string.to.print)
}
nsw <- st_read(str_c(data.path,"studyarea/state/NSW_STATE_POLYGON_shp_ex_islands_proj.shp"))
combined_bio <- st_read(str_c(data.path,"studyarea/Cfact_analysis_regions/Cfact_analysis_regions_prj.shp"))
bioregion <- st_read(str_c(data.path,"studyarea/ibra/IBRA_NSW_clipped.shp"))
studyarea <- rbind(nsw %>% transmute(name = "state"),
combined_bio %>% transmute(name = combined_bio$Cfact_Regi),
bioregion %>% transmute(name = bioregion$REG_NAME_7))
## Step 2.2 Choose a learner and set predict output in probability
learner = mlr3::lrn("classif.xgboost",
predict_type = "prob",
tree_metho = "hist")
## Step 2.2 Choose a learner and set predict output in probability
learner = mlr3::lrn("classif.xgboost",
predict_type = "prob",
tree_method = "hist")
## Step 2.2 Choose a learner and set predict output in probability
learner = mlr3::lrn("classif.xgboost",
booster = "gbtree",
predict_type = "prob",
tree_method = "hist")
region <- "state"
agent <- "agri"
#Specify the data path based on the system
data.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ "./data/",
#Sys.info()["sysname"] == "Darwin" ~ "mac",
Sys.info()["sysname"] == "Linux" ~ "/home/ubuntu/data/"
)
#Warning message if it can't find the directory
if (dir.exists(data.path)){
print("Directory exists - process will run")
} else {
string.to.print <- paste("ERROR: can't find the directory: check data path", data.path)
stop(string.to.print)
}
nsw <- st_read(str_c(data.path,"studyarea/state/NSW_STATE_POLYGON_shp_ex_islands_proj.shp"))
combined_bio <- st_read(str_c(data.path,"studyarea/Cfact_analysis_regions/Cfact_analysis_regions_prj.shp"))
bioregion <- st_read(str_c(data.path,"studyarea/ibra/IBRA_NSW_clipped.shp"))
studyarea <- rbind(nsw %>% transmute(name = "state"),
combined_bio %>% transmute(name = combined_bio$Cfact_Regi),
bioregion %>% transmute(name = bioregion$REG_NAME_7))
# Start the timer
tic("Start analysis")
results.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ str_c("./results/",region,"/"),
#Sys.info()["sysname"] == "Darwin" ~ "mac",
Sys.info()["sysname"] == "Linux" ~ str_c("/home/ubuntu/results/",region,"/")
)
if (!dir.exists(results.path)){dir.create(results.path)}
print(str_c("Model starting for ", agent, " in ", region, " bioregion"))
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = "majorityrule")
cov.path <- dir(str_c(data.path, "covariates", sep=""), full.names = T, pattern = ".tif$")
#Remove minimum lot size from the state level as there is no data in western states
cov.path <- str_subset(cov.path, pattern = "minimumlotsize", negate = T)
cov.path
#Remove minimum lot size from the state level as there is no data in western states
cov.path <- str_subset(cov.path, pattern = "minimumlotsize", negate = T)
cov.path
#Load BCT and WOODY DATA
bct <- st_read(dir(str_c(data.path,"/bct/"), full.names = T, pattern = "*.shp$"))
woody.private.land <- rast(dir(str_c(data.path, "woodyonprivateland", sep=""), full.names = T, pattern = ".tif$"))
#Create a function to run analysis across the parameters
roi <- studyarea %>% filter(name == region)
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "afcombined" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.raster <- rast(loss.file)
#Mask to the ROI
loss.raster <- loss.raster %>% crop(roi)
#Mask to the ROI
ifelse(
region == "state",
loss.raster,
loss.raster <- loss.raster %>% crop(roi)
)
woodyonprivate <- rast(str_c(data.path, "woodyonprivateland/","woodyonprivate.tif")) %>% crop(roi)
woodyonprivate <- rast(str_c(data.path, "woodyonprivateland/","woodyonprivate.tif"))
ifelse(
region == "state",
woodyonprivate,
woodyonprivate <- woodyonprivate %>% crop(roi)
)
plot(woodyonprivate)
#Clip Loss Raster
all.losses <- rast(str_c(data.path,"loss/", "nsw_state_allagents_resampled100m_majorityrule.tif"))
ifelse(
region == "state",
all.losses,
all.losses <- all.losses %>% crop(roi)
)
woodyonprivate <- rast(str_c(data.path, "woodyonprivateland/","woodyonprivate.tif"))
ifelse(
region == "state",
woodyonprivate,
woodyonprivate <- woodyonprivate %>% crop(roi)
)
##1.3 Now get the training points/pixels from the loss raster
loss.pts <- as.points(loss.raster) %>%
geom() %>%
as.data.frame() %>%
transmute(x,y)
#Set n_samples to all loss points - change this if there is computational issue
nsamples <- as.numeric(nrow(loss.pts))
###2. Collect background samples
bg.raster <- woodyonprivate %>%
mask(., vect(bct), inverse = T) %>%
mask(., all.losses, inverse = T)
###2.4 Samples to take from loss data
nsamples <- case_when(
nrow(loss.pts) < nsamples ~ nrow(loss.pts),
TRUE ~ as.integer(nsamples)
)
nsamples <- 1000
loss.pts <- loss.pts %>%
slice_sample(n=nsamples)
bg.pts <- as.points(bg.raster) %>%
geom() %>%
as.data.frame() %>%
transmute(x,y) %>%
slice_sample(n = nrow(loss.pts))
head(bg.pts)
?spatsample
?spatSample
a <- terra::spatSample(bg.raster, n = nrow(loss.pts), xy=T, )
a <- terra::spatSample(x=bg.raster, n = nrow(loss.pts), xy=T, )
a <- terra::spatSample(x=bg.raster, n = nrow(loss.pts), xy=T)
a <- terra::spatSample(x=bg.raster, n = 2, xy=T)
a <- terra::spatSample(rast(bg.raster), n = 2, xy=T)
a <- spatSample(bg.raster,2,"random",xy=T)
View(a)
a <- spatSample(bg.raster,2,"random",xy=T, na.rm=T)
View(a)
a <- spatSample(bg.raster,200,"random",xy=T, na.rm=T)
View(a)
a <- spatSample(bg.raster,200,"random",as.points=T, na.rm=T)
nrow(a)
a <- spatSample(bg.raster,200,"random",xy=T, na.rm=T)
a <- spatSample(bg.raster,200,"random",cells=T, na.rm=T)
a <- spatSample(bg.raster,200,"random",cells=T, na.rm=T)
a <- spatSample(bg.raster,200,"random",cells=T, na.rm=T)
## 3. Join loss and background points 1= loss and 0 = background
pts <- rbind(
loss.pts %>% mutate(loss = as.factor(1)),
bg.pts %>% mutate(loss = as.factor(0)))
##3.1 Convert to sf object
pts <- st_as_sf(pts, coords= c("x","y"))
model.name <- str_c("roi_",region,"_",
"agent_",agent,"_",
"samples_",nrow(loss.pts),"_",
"cv_",nfolds,"_",
"rep_",nreps,"_",
"mod_",nmod)
print(str_c("Starting model:: ",model.name))
covariates <- rast(cov.path)
ifelse(
region == "state",
covariates,
covariates <- covariates %>% crop(roi)
)
print(str_c("No of covariates used for modelling: ", nlyr(covariates)))
good.names <- str_extract(cov.path,pattern = "(?<=_)[^.]*(?=.)")
good.names
#Assign names now
names(covariates) <- good.names
df <- terra::extract(covariates,vect(pts), xy=T) %>%
data.frame() %>%
mutate(loss = as.factor(pts$loss)) %>%
dplyr::select(-ID)%>% #At this step check which points have NA -
drop_na() #mlr doesn't take na so remove if any column has NA
################# STEP 2: MODELLING SECTION ###########################
print(str_c("Model training starting for ", agent, " in ", region, " bioregion"))
task = mlr3spatiotempcv::TaskClassifST$new(
id = "xgboost_model",
backend = mlr3::as_data_backend(df),
target = "loss",
positive = "1",
extra_args = list(
coordinate_names = c("x", "y"), #Specify to use these columns as coordinates
coords_as_features = FALSE,
crs = "EPSG:3577") #Albers
)
levs = levels(task$truth())
## Step 2.2 Choose a learner and set predict output in probability
learner = mlr3::lrn("classif.xgboost",
booster = "gbtree",
predict_type = "prob",
tree_method = "hist")
#To make sure the tuning doesn't stop if any model fails
learner$fallback = lrn("classif.xgboost", predict_type = "prob")
#set to use 4 CPUs
set_threads(learner, n = availableCores())
#Create a outer level resampling strategy
perf.level = mlr3::rsmp("repeated_spcv_coords", folds = nfolds, repeats = nreps)
#Create an inner level resampling strategy
tune.level = mlr3::rsmp("spcv_coords", folds = nfolds)
##specify the budget available for tuning - we use
##terminate after a given number of iterations of hyper-parameter combinations
evals = mlr3tuning::trm("evals", n_evals = nmod)
#Set the optimization of algorithm takes place - we choose random search
tuner = mlr3tuning::tnr("random_search")
# define the outer limits of the randomly selected hyper-parameters
search_space = paradox::ps(
# The number of trees in the model (each one built sequentially)
nrounds = paradox::p_int(lower = 100, upper = 300),
# number of splits in each tree
max_depth = paradox::p_int(lower = 3, upper = 5),
# Learning rate - "shrinkage" - prevents over-fitting
eta = paradox::p_dbl(lower = .1, upper = .4),
#regularizes by limiting the depth of trees, which helps prevent over-fitting
min_child_weight = paradox::p_dbl(lower = 1, upper =10),
colsample_bytree = paradox::p_dbl(lower = 0.5, upper =1),
subsample = paradox::p_dbl(lower = 0.5, upper =1),
#L2 regularization term on weights
lambda = paradox::p_dbl(lower = -1, upper = 0, trafo = function(x) 10^x))
#Tuner for re-sampling only
at_resample <- mlr3tuning::AutoTuner$new(
learner = learner,
resampling = tune.level,
measure = mlr3::msr("classif.auc"),
search_space = search_space,
terminator = evals,
tuner = tuner
)
tic()
resampled = mlr3::resample(task = task,
learner = at_resample,
# outer resampling (performance level)
resampling = perf.level,
store_models = F,
encapsulate = "evaluate")
toc()
## Step 2.2 Choose a learner and set predict output in probability
learner = mlr3::lrn("classif.xgboost",
#booster = "gbtree",
predict_type = "prob")
#To make sure the tuning doesn't stop if any model fails
learner$fallback = lrn("classif.xgboost", predict_type = "prob")
#set to use 4 CPUs
set_threads(learner, n = availableCores())
#Create a outer level resampling strategy
perf.level = mlr3::rsmp("repeated_spcv_coords", folds = nfolds, repeats = nreps)
#Create an inner level resampling strategy
tune.level = mlr3::rsmp("spcv_coords", folds = nfolds)
##specify the budget available for tuning - we use
##terminate after a given number of iterations of hyper-parameter combinations
evals = mlr3tuning::trm("evals", n_evals = nmod)
#Set the optimization of algorithm takes place - we choose random search
tuner = mlr3tuning::tnr("random_search")
# define the outer limits of the randomly selected hyper-parameters
search_space = paradox::ps(
# The number of trees in the model (each one built sequentially)
nrounds = paradox::p_int(lower = 100, upper = 300),
# number of splits in each tree
max_depth = paradox::p_int(lower = 3, upper = 5),
# Learning rate - "shrinkage" - prevents over-fitting
eta = paradox::p_dbl(lower = .1, upper = .4),
#regularizes by limiting the depth of trees, which helps prevent over-fitting
min_child_weight = paradox::p_dbl(lower = 1, upper =10),
colsample_bytree = paradox::p_dbl(lower = 0.5, upper =1),
subsample = paradox::p_dbl(lower = 0.5, upper =1),
#L2 regularization term on weights
lambda = paradox::p_dbl(lower = -1, upper = 0, trafo = function(x) 10^x))
#Tuner for re-sampling only
at_resample <- mlr3tuning::AutoTuner$new(
learner = learner,
resampling = tune.level,
measure = mlr3::msr("classif.auc"),
search_space = search_space,
terminator = evals,
tuner = tuner
)
tic()
resampled = mlr3::resample(task = task,
learner = at_resample,
# outer resampling (performance level)
resampling = perf.level,
store_models = F,
encapsulate = "evaluate")
toc()
