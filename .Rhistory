getLoss <- function(matchid) {
df.filter <- m.df %>%
filter(match.id == matchid)
df.sum <- yrLoss %>%
filter(yrLoss$id %in% df.filter$id &
yrLoss$loss_year > df.filter$exe_yr[df.filter$treat==1]) %>%
group_by(id) %>%
summarise(sumPostLossControls = sum(loss_ha, na.rm=T))
df.mean <- df.sum %>%
summarise(meanPostLossControls =
mean(sumPostLossControls, na.rm=T))
}
df.summary <- matchid %>%
map_dfr(getLoss)
getLoss <- function(x) {
df.filter <- m.df %>%
filter(match.id == x)
df.sum <- yrLoss %>%
filter(yrLoss$id %in% df.filter$id &
yrLoss$loss_year > df.filter$exe_yr[df.filter$treat==1]) %>%
group_by(id) %>%
summarise(sumPostLossControls = sum(loss_ha, na.rm=T))
df.mean <- df.sum %>%
summarise(meanPostLossControls =
mean(sumPostLossControls, na.rm=T))
}
df.summary <- matchid %>%
map_dfr(getLoss)
df.filter <- m.df %>%
filter(match.id == 1)
View(df.filter)
controlsids <- m.df %>% filter(match.id == 1) %>% pull(id)
controlsids
controlsids <- m.df %>% filter(match.id == 1 | treat==0) %>% pull(id)
controlsids
executedyr <- m.df %>% filter(match.id ==1 | treat==1) %>% pull(exe_yr)
executedyr
executedyr <- m.df %>% filter(match.id ==1 & treat==1) %>% pull(exe_yr)
controlsids <- m.df %>% filter(match.id == 1 & treat==0) %>% pull(id)
controlsids
controlsid <- m.df %>% filter(match.id == 1 & treat==0) %>% pull(id)
control_id <- m.df %>% filter(match.id == 1 & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==1 & treat==1) %>% pull(exe_yr)
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(totalLossEachControl = sum(loss_ha, na.rm=T))
View(totalLossEachControl)
View(m.df)
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(totalLossEachControl = sum(loss_ha, na.rm=T))
View(totalLossEachControl)
View(totalLossEachControl)
meanLoss <- mean(totalLossEachControl$sum, na.rm=T)
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sum = sum(loss_ha, na.rm=T))
View(totalLossEachControl)
meanLoss <- mean(totalLossEachControl$sum, na.rm=T)
meanLoss <- round(meanLoss, digits = 2)
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == 1 & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==1 & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sum = sum(loss_ha, na.rm=T))
#Mean of of all controls
meanLossControl <- mean(totalLossEachControl$sum, na.rm=T)
meanLossControl <- round(meanLoss, digits = 2)
}
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == x & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==x & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sum = sum(loss_ha, na.rm=T))
#Mean of of all controls
meanLossControl <- mean(totalLossEachControl$sum, na.rm=T)
meanLossControl <- round(meanLoss, digits = 2)
}
df.summary <- matchid %>%
map_dfr(getLoss)
df.summary <- matchid %>%
map_dfr(pastAvoidedLoss)
matchid
df.summary <- matchid %>%
map(pastAvoidedLoss)
df.summary <- 1 %>%
map(pastAvoidedLoss)
View(df.summary)
df.summary <- 2 %>%
map(pastAvoidedLoss)
View(df.summary)
df.summary <- 3 %>%
map(pastAvoidedLoss)
View(df.summary)
df.summary <- 7 %>%
map(pastAvoidedLoss)
View(df.summary)
View(m.df)
matchid
matchid <- m.df$match.id[m.df$treat==1]
matchid
df.summary <- matchid %>%
map_dfr(pastAvoidedLoss)
df.summary <- matchid %>%
map(pastAvoidedLoss)
View(df.summary)
exe_yr <- m.df %>% filter(match.id ==1 & treat==1) %>% pull(exe_yr)
exe_yr
exe_yr <- m.df %>% filter(match.id ==2 & treat==1) %>% pull(exe_yr)
exe_yr
control_id <- m.df %>% filter(match.id == 2 & treat==0) %>% pull(id)
control_id
exe_yr
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sum = sum(loss_ha, na.rm=T))
View(totalLossEachControl)
#Mean of of all controls
meanLossControl <- mean(totalLossEachControl$sum, na.rm=T)
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == x & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==x & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sum = sum(loss_ha, na.rm=T))
#Mean of of all controls
meanLossControl <- mean(totalLossEachControl$sum, na.rm=T)
meanLossControl <- round(meanLossControl, digits = 2)
}
df.summary <- matchid %>%
map(pastAvoidedLoss)
View(df.summary)
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == x & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==x & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sum = sum(loss_ha, na.rm=T))
#Mean of of all controls
meanLossControl <- mean(totalLossEachControl$sum, na.rm=T)
meanLossControl <- round(meanLossControl, digits = 2)
m.df <- cbind(m.df, meanLossControl)
}
df.summary <- matchid %>%
map(pastAvoidedLoss)
View(df.summary)
colnames(m.df)
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == x & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==x & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sum = sum(loss_ha, na.rm=T))
#Mean of of all controls
meanLossControl <- mean(totalLossEachControl$sum, na.rm=T)
meanLossControl <- round(meanLossControl, digits = 2)
df <- m.df %>%
filter(match.id == x & treat ==1) %>%
select(id,exe_yr,area_ha,pred,propwdy,ncontrols) %>%
mutate(pastAvoidedLoss = meanLossControl)
}
df.summary <- matchid %>%
map_dfr(pastAvoidedLoss)
View(df.summary)
View(df.summary)
a <- df.summary
View(a)
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == x & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==x & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sumLoss = sum(loss_ha, na.rm=T),
meanLossControl = mean(loss_ha, na.rm=T),
meanAreaControl = mean(area_ha, na.rm=T),
meanRiskControl = mean(pred, na.rm=T),
meanPropWoody = mean(propwdy, na.rm=T))
#Mean of of all controls
# meanLossControl <- mean(totalLossEachControl$sumLoss, na.rm=T)
# meanLossControl <- round(meanLossControl, digits = 2)
#
# #Normalize the loss with the prop of woody in the agreements
# meanAvoidedLoss <- meanLossControl/mean()
#
# df <- m.df %>%
#   filter(match.id == x & treat ==1) %>%
#   select(id,exe_yr,area_ha,pred,propwdy,ncontrols) %>%
#   mutate(pastAvoidedLoss = meanLossControl)
}
df.summary <- matchid %>%
map_dfr(pastAvoidedLoss)
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == x & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==x & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sumLoss = sum(loss_ha, na.rm=T),
meanLossControl = mean(loss_ha, na.rm=T),
meanAreaControl = mean(area_ha, na.rm=T),
meanPropWoody = mean(propwdy, na.rm=T))
#Mean of of all controls
# meanLossControl <- mean(totalLossEachControl$sumLoss, na.rm=T)
# meanLossControl <- round(meanLossControl, digits = 2)
#
# #Normalize the loss with the prop of woody in the agreements
# meanAvoidedLoss <- meanLossControl/mean()
#
# df <- m.df %>%
#   filter(match.id == x & treat ==1) %>%
#   select(id,exe_yr,area_ha,pred,propwdy,ncontrols) %>%
#   mutate(pastAvoidedLoss = meanLossControl)
}
df.summary <- matchid %>%
map_dfr(pastAvoidedLoss)
pastAvoidedLoss <- function(x) {
control_id <- m.df %>% filter(match.id == x & treat==0) %>% pull(id)
exe_yr <- m.df %>% filter(match.id ==x & treat==1) %>% pull(exe_yr)
#Sum of post intervention losses in each control
totalLossEachControl <- yrLoss %>%
filter(yrLoss$id %in% control_id &
yrLoss$loss_year > exe_yr) %>%
group_by(id) %>%
summarise(sumLoss = sum(loss_ha, na.rm=T),
meanLossControl = mean(loss_ha, na.rm=T),
meanAreaControl = mean(area_ha, na.rm=T))
#Mean of of all controls
# meanLossControl <- mean(totalLossEachControl$sumLoss, na.rm=T)
# meanLossControl <- round(meanLossControl, digits = 2)
#
# #Normalize the loss with the prop of woody in the agreements
# meanAvoidedLoss <- meanLossControl/mean()
#
# df <- m.df %>%
#   filter(match.id == x & treat ==1) %>%
#   select(id,exe_yr,area_ha,pred,propwdy,ncontrols) %>%
#   mutate(pastAvoidedLoss = meanLossControl)
}
df.summary <- matchid %>%
map_dfr(pastAvoidedLoss)
View(df.summary)
controlStats <- m.df %>%
filter(match.id==1 & treat ==0) %>%
unique(id)
controlStats <- m.df %>%
filter(match.id==1 & treat ==0)
View(controlStats)
controlStats <- m.df %>%
filter(match.id==1 & treat ==0) %>%
filter(unique(.id))
unique(m.df$id)
controlStats <- m.df %>%
filter(match.id==1 & treat ==0) %>%
distinct(id)
View(controlStats)
?distinct
controlStats <- m.df %>%
filter(match.id==1 & treat ==0) %>%
filter(distinct(id))
controlStats <- m.df %>%
filter(match.id==1 & treat ==0) %>%
distinct(id, .keep_all=T)
View(controlStats)
controlStats <- m.df %>%
filter(match.id==1 & treat ==0) %>%
distinct(id, .keep_all=T) %>%
summarise(
meanAreaControl = mean(area_ha),
meanPredControl = mean(pred),
meanPropWoody = mean(propwdy)
)
View(controlStats)
View(df)
controlStats <- m.df %>%
filter(match.id==1 & treat ==0) %>%
distinct(id, .keep_all=T) %>%
summarise(
meanAreaControl = mean(area_ha),
meanPredControl = mean(pred),
meanPropWoody = mean(propwdy),
meanTotalWoody = mean(totlwdy)
)
View(controlStats)
View(df)
plot(df$area_ha, df$totlwdy)
View(df)
chk <- df %>% select(area_ha, totlwdy)
chk <- df %>% select(id, area_ha, totlwdy)
View(chk)
duplicated(chk)
sum <- duplicated(chk)
sum <- chk[duplicated(chk)]
sum <- chk$id[duplicated(chk$id)]
View(chk)
setwd("E:/PhD Impact Evaluation/Chapter 3 conserv biology")
parcels <- st_read("./data/privateland_polygons/property_withbct_1kmbuffer_removed.shp")
cov.path <- dir("./data/covariates", full.names = T, pattern = ".tif$")
cov.path
#Predicted risk of loss
pred.path <- dir("./results/nc/", full.names = T, pattern = "pred")
cov.names <- str_extract(cov.path,pattern = "(?<=_)[^.]*(?=.)")
cov.names
covs <- cov.path %>%
map(rast) %>%
set_names(cov.names)
preds <- pred.path %>%
map(rast) %>%
set_names("pred_low","pred_upp","pred")
#Need to separate continuous covariates (mean) and categorical covariates (mode)
cat.vars <- c("keithclass","landuse")
cont.vars <- setdiff(cov.names,cat.vars)
data <- c(covs, preds)
View(df)
View(chk)
#Recalculate area - there could be errors due to clipping st_area given in m2 convert to ha
df <- df %>%
#mutate(area_ha = as.numeric(st_area (.))/1e4) %>%
st_drop_geometry() %>%
select(-landuse) %>% #Remove land use
filter(area_ha >= 1)
df <- st_read("./data/extracteddf/parceldata.shp")
#Recalculate area - there could be errors due to clipping st_area given in m2 convert to ha
df <- df %>%
#mutate(area_ha = as.numeric(st_area (.))/1e4) %>%
st_drop_geometry() %>%
select(-landuse) %>% #Remove land use
filter(area_ha >= 1)
chk <- df %>% select(id, area_ha, totlwdy)
View(chk)
df <- st_read("C:\\Users\\asus\\Desktop\\test.shp")
for (i in 1:length(preds)) {
x <- exact_extract(preds[[i]], df, fun = "mean")
col.name <- names(preds)[i]
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
packages <- c("sf","raster","terra","tidyverse","purrr","lubridate", "exactextractr")
purrr::map(packages, library, character.only=T)
for (i in 1:length(preds)) {
x <- exact_extract(preds[[i]], df, fun = "mean")
col.name <- names(preds)[i]
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
for (i in 1:length(preds)) {
x <- exact_extract(preds[[i]], df, fun = "stdev")
col.name <- str_c(names(preds)[i],"_sd")
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
for (i in 1:length(cont.vars)) {
x <- exact_extract(covs[cont.vars][[i]], df, fun = "mean")
col.name <- cont.vars[i]
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
for (i in 1:length(cat.vars)) {
x <- exact_extract(covs[cat.vars][[i]], df, fun = "mode")
col.name <- cat.vars[i]
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
cov.path <- dir("./data/covariates", full.names = T, pattern = ".tif$")
#Predicted risk of loss
pred.path <- dir("./results/nc/", full.names = T, pattern = "pred")
cov.names <- str_extract(cov.path,pattern = "(?<=_)[^.]*(?=.)")
covs <- cov.path %>%
map(rast) %>%
set_names(cov.names)
preds <- pred.path %>%
map(rast) %>%
set_names("pred_low","pred_upp","pred")
#Need to separate continuous covariates (mean) and categorical covariates (mode)
cat.vars <- c("keithclass","landuse")
cont.vars <- setdiff(cov.names,cat.vars)
data <- c(covs, preds)
df <- st_read("C:\\Users\\asus\\Desktop\\test.shp")
for (i in 1:length(preds)) {
x <- exact_extract(preds[[i]], df, fun = "mean")
col.name <- names(preds)[i]
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
for (i in 1:length(preds)) {
x <- exact_extract(preds[[i]], df, fun = "stdev")
col.name <- str_c(names(preds)[i],"_sd")
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
for (i in 1:length(cont.vars)) {
x <- exact_extract(covs[cont.vars][[i]], df, fun = "mean")
col.name <- cont.vars[i]
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
for (i in 1:length(cat.vars)) {
x <- exact_extract(covs[cat.vars][[i]], df, fun = "mode")
col.name <- cat.vars[i]
df <- cbind(df, x)
colnames(df)[colnames (df) == "x"] <- col.name
}
cat.vars
View(df)
setwd("E:/01_NSW phase 2/statelevelanalysis/data/covariates")
packages <- c("purrr","tidyverse","sf","exactextractr","raster","fasterize")
purrr::walk(packages, library, character.only=T)
property <- st_read("E:\\01_NSW phase 2\\property_guras\\property_boundaries_GURAS.shp")
woody <- raster("E:\\01_NSW phase 2\\statelevelanalysis\\data\\woody\\nsw_state_woody_100m_majorityrule.tif")
woody <- raster("E:\\01_NSW phase 2\\statelevelanalysis\\data\\woody\\nsw_state_woody_100m_majorityrule.tif")
df <- df %>%
mutate(totalwoodypix = exact_extract(woody, ., fun = "sum")) %>%
mutate(totalwoodyarea = totalwoodypix * (100*100/1e4)) %>% #100sq m to ha (same thing)
mutate(propwoody = totalwoodyarea/AREA_H)
df <- df %>%
mutate(totalwoodypix = exact_extract(woody, ., fun = "sum")) %>%
mutate(totalwoodyarea = totalwoodypix * (100*100/1e4)) %>% #100sq m to ha (same thing)
mutate(propwoody = totalwoodyarea/area_ha)
View(df)
View(df)
?exact_extract
setwd("E:/01_NSW phase 2/statelevelanalysis")
#Load required libraries
required.packages <- c("sf","terra","data.table","tidyverse",
"mlr3","mlr3learners","mlr3spatiotempcv",
"mlr3viz","mlr3tuning","iml","future","furrr",
"purrr","xgboost","lattice","tictoc","scico","ggtext")
#Select which region to model
#regions.available <- c("state","Central West","Tablelands","Coastal","Western")
region <- "state"
#agent.available <- c("agri","fores","infra","combined")
agent <- "agri"
nsamples <- 10000
nfolds <- 5
nreps <- 2
#Number of combinations from random grid search
# for different hyper-parameter combination
nmod <- 5
#Only relevant to windows and mac for now- parallel will be off for nectar
runparallel=F
#Specify the data path based on the system
data.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ "./data/",
#Sys.info()["sysname"] == "Darwin" ~ "mac",
Sys.info()["sysname"] == "Linux" ~ "/home/ubuntu/data/"
)
if (dir.exists(data.path)){
print("Directory exists - process will run")
} else {
string.to.print <- paste("ERROR: can't find the directory: check data path", data.path)
stop(string.to.print)
}
results.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ str_c("./results/",region,"/"),
#Sys.info()["sysname"] == "Darwin" ~ "mac",
Sys.info()["sysname"] == "Linux" ~ str_c("/home/ubuntu/results/",region,"/")
)
if (!dir.exists(results.path)){dir.create(results.path)}
nsw <- st_read(str_c(data.path,"studyarea/state/NSW_STATE_POLYGON_shp_ex_islands_proj.shp"))
bioregion <- st_read(str_c(data.path,"studyarea/Cfact_analysis_regions/Cfact_analysis_regions_prj.shp"))
ifelse(
region == "Coastal",
roi <- bioregion %>% filter(Cfact_Regi == region),
roi <- nsw
)
print(str_c("Model starting for ", region, " level analysis"))
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = "majorityrule")
loss.pts <- as.points(loss.raster)
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "afcombined" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.raster <- rast(loss.file)
loss.pts <- as.points(loss.raster)
loss.pts <- as.points(loss.raster) %>%
geom() %>%
as.data.frame()
?mlr3tuning
